class Terminal {
    constructor(outputElement) {
        this.output = outputElement;
        this.currentLine = 0;
    }

    print(message, type = 'info', delay = 0) {
        return new Promise(resolve => {
            setTimeout(() => {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if (message.trim() === '') {
                    resolve();
                    return;
                }
                
                const line = document.createElement('div');
                line.className = `output-line ${type}`;
                
                line.style.opacity = '0';
                line.textContent = message;
                
                this.output.appendChild(line);
                
                setTimeout(() => {
                    line.style.transition = 'opacity 0.5s ease';
                    line.style.opacity = '1';
                }, 50);
                
                // –î—É–±–ª–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞
                const consoleMessage = `[${type.toUpperCase()}] ${message}`;
                switch(type) {
                    case 'error':
                        console.error(consoleMessage);
                        break;
                    case 'warning':
                        console.warn(consoleMessage);
                        break;
                    case 'success':
                        console.log(`%c${consoleMessage}`, 'color: #00ff88; font-weight: bold');
                        break;
                    case 'system':
                        console.log(`%c${consoleMessage}`, 'color: #00aaff; font-weight: bold');
                        break;
                    default:
                        console.log(consoleMessage);
                }
                
                this.scrollToBottom();
                this.currentLine++;
                resolve();
            }, delay);
        });
    }

    printCode(code, type = 'object', delay = 0) {
        return new Promise(resolve => {
            setTimeout(() => {
                const codeBlock = document.createElement('div');
                codeBlock.className = `output-line ${type} code-block`;
                
                codeBlock.style.opacity = '0';
                codeBlock.textContent = code;
                
                this.output.appendChild(codeBlock);
                
                setTimeout(() => {
                    codeBlock.style.transition = 'opacity 0.5s ease';
                    codeBlock.style.opacity = '1';
                }, 50);
                
                console.log(`%c${code}`, 'background: #000000; color: #ff9966; padding: 8px; border-radius: 4px; font-family: monospace;');
                
                this.scrollToBottom();
                resolve();
            }, delay);
        });
    }

    printSeparator(text = '=', type = 'full-separator', delay = 0) {
        return new Promise(resolve => {
            setTimeout(() => {
                const separator = document.createElement('div');
                separator.className = `output-line ${type}`;
                
                separator.style.opacity = '0';
                separator.textContent = text.repeat(80).substring(0, 80);
                
                this.output.appendChild(separator);
                
                setTimeout(() => {
                    separator.style.transition = 'opacity 0.5s ease';
                    separator.style.opacity = '1';
                }, 50);
                
                console.log(`%c${separator.textContent}`, 'color: #444444; font-weight: bold;');
                
                this.scrollToBottom();
                resolve();
            }, delay);
        });
    }

    startTaskGroup(title, delay = 0) {
        return new Promise(resolve => {
            setTimeout(() => {
                const group = document.createElement('div');
                group.className = 'output-line task-group';
                
                group.style.opacity = '0';
                
                const header = document.createElement('div');
                header.className = 'task-header';
                header.textContent = title;
                
                group.appendChild(header);
                this.output.appendChild(group);
                
                setTimeout(() => {
                    group.style.transition = 'opacity 0.5s ease';
                    group.style.opacity = '1';
                }, 50);
                
                console.log(`%c${title}`, 'color: #00aaff; font-size: 16px; font-weight: bold; margin: 10px 0;');
                
                this.scrollToBottom();
                this.currentLine++;
                resolve(group);
            }, delay);
        });
    }

    showGif(imageUrl, caption, delay = 0) {
        return new Promise(resolve => {
            setTimeout(() => {
                const gifContainer = document.createElement('div');
                gifContainer.className = 'output-line christopher-gif';
                
                gifContainer.style.opacity = '0';
                
                const img = document.createElement('img');
                img.src = imageUrl;
                img.alt = caption;
                
                const captionElement = document.createElement('div');
                captionElement.className = 'christopher-text';
                captionElement.textContent = caption;
                
                gifContainer.appendChild(img);
                gifContainer.appendChild(captionElement);
                this.output.appendChild(gifContainer);
                
                setTimeout(() => {
                    gifContainer.style.transition = 'opacity 0.5s ease';
                    gifContainer.style.opacity = '1';
                }, 50);
                
                console.log(`%c${caption}`, 'color: #ffbd2e; font-size: 18px; font-weight: bold; font-style: italic;');
                console.log('%c(–≥–∏—Ñ–∫–∞ –ö—Ä–∏—Å—Ç–æ—Ñ–µ—Ä–∞)', 'color: #00aaff; font-style: italic;');
                
                this.scrollToBottom();
                resolve();
            }, delay);
        });
    }

    scrollToBottom() {
        this.output.parentElement.scrollTop = this.output.parentElement.scrollHeight;
    }

    clear() {
        this.output.innerHTML = '';
        this.currentLine = 0;
        console.clear();
        console.log('%c–ö–æ–Ω—Å–æ–ª—å –æ—á–∏—â–µ–Ω–∞... –∫–∞–∫ –±—É–¥—Ç–æ –Ω–∏—á–µ–≥–æ –∏ –Ω–µ –±—ã–ª–æ', 'color: #00aaff; font-weight: bold;');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
const terminal = new Terminal(document.getElementById('output'));
let isRunning = false;

// –ì—Ä—É–ø–ø–∞ 1: –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ (–∑–∞–¥–∞–Ω–∏—è 1-2)
async function basicVariablesTasks() {
    const group = await terminal.startTaskGroup('üìù –ì–†–£–ü–ü–ê 1: –ë–ê–ó–û–í–´–ï –ë–£–ü–ê–¢–ï–õ–¨–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò –° –ü–ï–†–ï–ú–ï–ù–ù–´–ú–ò', 500);
    
    // –ó–∞–¥–∞–Ω–∏–µ 1
    await terminal.print('üéØ –ó–∞–¥–∞–Ω–∏–µ 1: –†–∞–±–æ—Ç–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä–æ–±–µ—Ä—Ç–∞', 'system');
    
    let adminName;
    let userName = "–ò–≤–∞–Ω";
    adminName = userName;
    
    await terminal.print('üì¶ –û–±—ä—è–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: adminName –∏ userName (–∫–∞–∫ –≤—Å–µ–º–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –ë–æ–ª–µ–∫ –∏ –õ—ë–ª–µ–∫)', 'info', 300);
    await terminal.print(`üÜî userName = "${userName}" (—ç—Ç–æ —Ç–æ—Ç, –∫—Ç–æ –ø–ª–∞—Ç–∏—Ç –∑–∞ –∫–æ—Ñ–µ, –Ω–∞–≤–µ—Ä–Ω–æ–µ...)`, 'info', 200);
    await terminal.print('üîÑ adminName = userName (–≤–µ–ª–∏–∫–æ–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∞–¥–º–∏–Ω–∞...)', 'info', 200);
    await terminal.print(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: adminName = "${adminName}" (—Ç–µ–ø–µ—Ä—å —É –Ω–∞—Å –¥–≤–∞ –ò–≤–∞–Ω–∞! –ù–æ –æ–¥–∏–Ω –∫—Ä—É—á–µ... –ú—ã –Ω–µ —É–∑–Ω–∞–µ–º, –∫—Ç–æ)`, 'success', 300);

    await terminal.printSeparator('~', 'section-separator', 400);
    
    // –ó–∞–¥–∞–Ω–∏–µ 2
    await terminal.print('üéØ –ó–∞–¥–∞–Ω–∏–µ 2: –ü–æ–Ω—è—Ç–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–≤–æ–∑–º–æ–∂–Ω–æ!)', 'system');
    
    const planetName = "–ó–µ–º–ª—è";
    const currentUserName = "–ë–æ–±–∞–Ω";
    const userRegistrationDate = "2024-01-15";
    const userRole = "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä";
    
    await terminal.print(`üåç planetName = "${planetName}" (–Ω–∞—à–∞ –≥–æ–ª—É–±–∞—è –∂–µ–º—á—É–∂–∏–Ω–∞)`, 'info', 200);
    await terminal.print(`üë§ currentUserName = "${currentUserName}" (—Ç–æ—Ç, –∫—Ç–æ –≤–µ—á–Ω–æ –∑–∞–±—ã–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å –æ—Ç –∫–æ–º–ø–∞ –∏–Ω–∂–µ–Ω–µ—Ä–∞)`, 'info', 200);
    await terminal.print(`üìÖ userRegistrationDate = "${userRegistrationDate}" (–ø–æ–º–Ω–∏—Ç–µ —ç—Ç–æ—Ç –¥–µ–Ω—å? –Ø —Ç–æ—á–Ω–æ –Ω–µ –ø–æ–º–Ω—é)`, 'info', 200);
    await terminal.print(`üëë userRole = "${userRole}" (–±—Ä–µ–º—è –≤–ª–∞—Å—Ç–∏, –Ω–æ –∫–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!)`, 'info', 200);
    await terminal.print('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ (–¥–∞–∂–µ –±–∞–±—É–ª—è –ø–æ–π–º–µ—Ç! –í–ø–æ–ª–Ω–µ —Å–µ–±–µ...)', 'success', 300);
}

// –ì—Ä—É–ø–ø–∞ 2: –†–∞–±–æ—Ç–∞ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ (–∑–∞–¥–∞–Ω–∏—è 3-4)
async function objectsTasks() {
    await terminal.printSeparator('=', 'full-separator', 600);
    const group = await terminal.startTaskGroup('üõ†Ô∏è –ì–†–£–ü–ü–ê 2: –†–ê–ë–û–¢–ê –° –ë–û–õ –û–ë–™–ï–ö–¢–ê–ú–ò', 500);
    
    // –ó–∞–¥–∞–Ω–∏–µ 3
    await terminal.print('üéØ –ó–∞–¥–∞–Ω–∏–µ 3: –†–∞–±–æ—Ç–∞ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏', 'system');
    
    const product = {
        name: "–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–π –Ω–æ—É—Ç–±—É–∫",
        price: 45000
    };
    
    await terminal.print('üì¶ –°–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç product (–æ—Å–Ω–æ–≤–∞ –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö —Å–≤–µ—Ä—à–µ–Ω–∏–π –Ω–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞):', 'info', 300);
    await terminal.printCode(JSON.stringify(product, null, 2), 'object', 400);
    
    product.category = "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞";
    product.price = 42000;
    
    await terminal.print('üîÑ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ category –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞ (–Ω–æ –Ω–∞ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂—É –∏ –Ω–µ –Ω–∞–¥–µ–π—Ç–µ—Å—å!):', 'info', 400);
    await terminal.printCode(JSON.stringify(product, null, 2), 'object', 400);
    await terminal.print('‚úÖ –û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω (—Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–¥—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω, —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è)', 'success', 300);

    await terminal.printSeparator('~', 'section-separator', 500);
    
    // –ó–∞–¥–∞–Ω–∏–µ 4
    await terminal.print('üéØ –ó–∞–¥–∞–Ω–∏–µ 4: –†–∞–±–æ—Ç–∞ —Å–æ —Å–ª–æ–∂–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏', 'system');
    
    const student = {
        name: "–ê–Ω–Ω–∞",
        age: 20,
        courses: ["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–§–∏–∑–∏–∫–∞", "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"],
        address: {
            city: "–ú–æ—Å–∫–≤–∞",
            street: "–õ–µ–Ω–∏–Ω–∞",
            number: 15
        }
    };
    
    await terminal.print('üì¶ –°–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç student (–Ω–∞—à –ø–æ–¥–æ–ø—ã—Ç–Ω—ã–π –ö–†–û–õ-–ª–∏–∫):', 'info', 300);
    await terminal.printCode(JSON.stringify(student, null, 2), 'object', 500);
    
    await terminal.print('üîÑ –ú–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ —Å –æ–±—ä–µ–∫—Ç–æ–º (–ø—É—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ —Ç–µ—Ä–Ω–∏—Å—Ç):', 'info', 400);
    await terminal.print('- üìö –î–æ–±–∞–≤–ª–µ–Ω –∫—É—Ä—Å "JavaScript" (–ø–æ—Ç–æ–º—É —á—Ç–æ –º–æ–¥–Ω–æ, –∫–∞–∫ –∏ —à—ç—Ç—ç–º—ç—ç–ª—å, –∫–∞–∫ –∏ —Å—Å—Å)', 'object', 200);
    await terminal.print('- üèôÔ∏è –ì–æ—Ä–æ–¥ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥" (–ø–µ—Ä–µ–µ–∑–¥ –≤ –∫—É–ª—å—Ç—É—Ä–Ω—É—é —Å—Ç–æ–ª–∏—Ü—É, –Ω–æ –ø–æ–¥ –º–æ—Å—Ç...)', 'object', 200);
    await terminal.print('- ‚ùå –£–¥–∞–ª–µ–Ω –ø–µ—Ä–≤—ã–π –∫—É—Ä—Å –∏–∑ –º–∞—Å—Å–∏–≤–∞ (–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –æ–∫–∞–∑–∞–ª–∞—Å—å —Å–ª–æ–∂–Ω–æ–π, –¥–∞ –∏ –∑–∞—á–µ–º –æ–Ω–∞ –Ω—É–∂–Ω–∞... –≤—Å–µ —É–º–Ω—ã–µ)', 'object', 200);
    await terminal.print('- üìä –î–æ–±–∞–≤–ª–µ–Ω—ã –æ—Ü–µ–Ω–∫–∏ (—Å—É—Ä–æ–≤–∞—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å –º–Ω–µ –≤ –ª–æ–±)', 'object', 200);
    
    student.courses.push("JavaScript");
    student.address.city = "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥";
    student.courses.shift();
    
    student.grades = {
        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": 4,
        "–§–∏–∑–∏–∫–∞": 5,
        "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ": 5,
        "JavaScript": 5
    };
    
    await terminal.print('üìã –§–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç student (–≤–æ –≤—Å–µ–π –∫—Ä–∞—Å–µ):', 'info', 400);
    await terminal.printCode(JSON.stringify(student, null, 2), 'object', 600);
    await terminal.print('‚úÖ –°–ª–æ–∂–Ω—ã–π –æ–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (—Å—Ç—É–¥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ç—Ä—É–¥—É –∏ —Å–µ—Å—Å–∏–∏!)', 'success', 300);
}

// –ì—Ä—É–ø–ø–∞ 3: –§—É–Ω–∫—Ü–∏–∏ –∏ –ª–æ–≥–∏–∫–∞ (–∑–∞–¥–∞–Ω–∏—è 5-7)
async function functionsTasks() {
    await terminal.printSeparator('=', 'full-separator', 600);
    const group = await terminal.startTaskGroup('‚öôÔ∏è –ì–†–£–ü–ü–ê 3: –§–£–ù–ö–¶–ò–ò –ò (–ù–ï)–õ–û–ì–ò–ö–ê', 500);
    
    // –ó–∞–¥–∞–Ω–∏–µ 5
    await terminal.print('üéØ –ó–∞–¥–∞–Ω–∏–µ 5: –†–∞–∑–±–æ—Ä –∫–æ–¥–∞', 'system');
    
    let a = 1, b = 1;
    let c = ++a;
    let d = b++;
    
    await terminal.print('üîç –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ (–º–∞–≥–∏—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–æ–≤):', 'info', 300);
    await terminal.print('let a = 1, b = 1; (–±–ª–∏–∑–Ω–µ—Ü—ã-—á–∏—Å–ª–∞)', 'object', 200);
    await terminal.print('let c = ++a; (–ø—Ä–µ—Ñ–∏–∫—Å–Ω—ã–π - —Å–Ω–∞—á–∞–ª–∞ –¥—É–º–∞–µ—Ç, –ø–æ—Ç–æ–º –¥–µ–ª–∞–µ—Ç)', 'object', 200);
    await terminal.print('let d = b++; (–ø–æ—Å—Ç—Ñ–∏–∫—Å–Ω—ã–π - —Å–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ—Ç, –ø–æ—Ç–æ–º –¥—É–º–∞–µ—Ç)', 'object', 200);
    
    await terminal.print('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç (–æ—Ç–∫—Ä–æ–≤–µ–Ω–∏–µ):', 'info', 300);
    await terminal.print(`a = ${a}, b = ${b}, c = ${c}, d = ${d} (—á–∏—Å–ª–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–∏–ª–∏—Å—å!)`, 'object', 300);
    await terminal.print('‚úÖ –ü—Ä–µ—Ñ–∏–∫—Å–Ω—ã–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç: –∑–Ω–∞—á–µ–Ω–∏–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –¥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞', 'success', 300);
    await terminal.print('‚úÖ –ü–æ—Å—Ç—Ñ–∏–∫—Å–Ω—ã–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç: –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –¥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è', 'success', 300);

    await terminal.printSeparator('~', 'section-separator', 500);
    
    // –ó–∞–¥–∞–Ω–∏–µ 6
    await terminal.print('üéØ –ó–∞–¥–∞–Ω–∏–µ 6: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π (—á—Ç–æ?)', 'system');
    
    function greet(name) {
        return `–ü—Ä–∏–≤–µ—Ç, ${name}!`;
    }
    
    function sum(a, b) {
        return a + b;
    }
    
    function isEven(number) {
        return number % 2 === 0;
    }
    
    function calculateArea(width, height) {
        return width * height;
    }
    
    await terminal.print('üîß –°–æ–∑–¥–∞–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏:', 'info', 300);
    await terminal.print('greet(name) - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (–≤–µ–∂–ª–∏–≤–æ—Å—Ç—å - –Ω–∞—à–µ –≤—Å—ë)', 'object', 200);
    await terminal.print('sum(a, b) - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –¥–≤—É—Ö —á–∏—Å–µ–ª (–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –¥–ª—è —á–∞–π–Ω–∏–∫–æ–≤)', 'object', 200);
    await terminal.print('isEven(number) - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á–µ—Ç–Ω–æ—Å—Ç—å —á–∏—Å–ª–∞ (–¥–µ–ª–∏–º–æ—Å—Ç—å –Ω–∞ 2 –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞)', 'object', 200);
    await terminal.print('calculateArea(width, height) - –≤—ã—á–∏—Å–ª—è–µ—Ç –ø–ª–æ—â–∞–¥—å (–≥–µ–æ–º–µ—Ç—Ä–∏—è –≤ –¥–µ–π—Å—Ç–≤–∏–∏)', 'object', 200);
    
    await terminal.print('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π (–∏—Å–ø—ã—Ç–∞–Ω–∏–µ –æ–≥–Ω–µ–º):', 'info', 300);
    await terminal.print(`greet("–ú–∞—Ä–∏—è") = "${greet("–ú–∞—Ä–∏—è")}"`, 'object', 200);
    await terminal.print(`sum(5, 3) = ${sum(5, 3)} (–≤–æ—Å–µ–º—å - —á–∏—Å–ª–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–∞)`, 'object', 200);
    await terminal.print(`isEven(4) = ${isEven(4)} (—á–µ—Ç–Ω–æ–µ - —Å–∏–º–≤–æ–ª –±–∞–ª–∞–Ω—Å–∞)`, 'object', 200);
    await terminal.print(`isEven(7) = ${isEven(7)} (–Ω–µ—á–µ—Ç–Ω–æ–µ - —Å–∏–º–≤–æ–ª —Ö–∞–æ—Å–∞)`, 'object', 200);
    await terminal.print(`calculateArea(5, 10) = ${calculateArea(5, 10)} (–ø–ª–æ—â–∞–¥—å –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —é–∑–∞–±–∏–ª–∏—Ç–∏... –ö—Ö–º.)`, 'object', 200);
    await terminal.print('‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤—É—é—Ç! –ù–æ –Ω–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤—É—é—Ç...)', 'success', 300);

    await terminal.printSeparator('~', 'section-separator', 500);
    
    // –ó–∞–¥–∞–Ω–∏–µ 7
    await terminal.print('üéØ –ó–∞–¥–∞–Ω–∏–µ 7: –§—É–Ω–∫—Ü–∏–∏ –∏ —É—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã', 'system');
    
    function checkAge(age) {
        if (age < 18) {
            return "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: –≤–æ–∑—Ä–∞—Å—Ç –º–µ–Ω—å—à–µ 18 –ª–µ—Ç.";
        } else if (age >= 18 && age <= 59) {
            return "–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω: –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!";
        } else {
            return "–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω: –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û—Å–æ–±—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏.";
        }
    }
    
    function getDiscount(totalAmount) {
        if (totalAmount < 1000) {
            return 0;
        } else if (totalAmount >= 1000 && totalAmount <= 5000) {
            return 5;
        } else {
            return 10;
        }
    }
    
    function greetUser(name, age) {
        const accessMessage = checkAge(age);
        return `–ü—Ä–∏–≤–µ—Ç, ${name}! ${accessMessage}`;
    }
    
    await terminal.print('üîû –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ checkAge (–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞):', 'info', 300);
    await terminal.print(`checkAge(16) = "${checkAge(16)}" (–∏–∑–≤–∏–Ω–∏—Ç–µ, –º–µ–ª–æ—á–∏ —Å—é–¥–∞ –Ω–µ –ø—Ä–∏–Ω–æ—Å–∏—Ç—å!)`, 'object', 200);
    await terminal.print(`checkAge(25) = "${checkAge(25)}" (–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤–∑—Ä–æ—Å–ª—ã–π —á–µ–ª–æ–≤–µ–∫)`, 'object', 200);
    await terminal.print(`checkAge(65) = "${checkAge(65)}" (—É–≤–∞–∂–∞–µ–º–æ–º—É –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä—É - –æ—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è, –¥–∞ –∫–æ—Ç–ª—ã –≥–µ–Ω–µ—Ä–∞–ª—å—Å–∫–∏–µ...)`, 'object', 200);
    
    await terminal.print('üí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ getDiscount (–º–∞–≥–∏—è —Å–∫–∏–¥–æ–∫):', 'info', 300);
    await terminal.print(`getDiscount(500) = ${getDiscount(500)}% (–º–∞–ª–æ–≤–∞—Ç–æ –¥–ª—è —Å–∫–∏–¥–∫–∏, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ)`, 'object', 200);
    await terminal.print(`getDiscount(2500) = ${getDiscount(2500)}% (—É–∂–µ —á—Ç–æ-—Ç–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ)`, 'object', 200);
    await terminal.print(`getDiscount(7500) = ${getDiscount(7500)}% (–≤–∞—à–∞ —â–µ–¥—Ä–æ—Å—Ç—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∞ (–º–æ–∂–Ω–æ –∏ –ø–µ–Ω–¥–∞–ª–µ–º)!)`, 'object', 200);
    
    await terminal.print('üëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ greetUser (–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ):', 'info', 300);
    await terminal.print(`greetUser("–ê–ª–µ–∫—Å–µ–π", 25) = "${greetUser("–ê–ª–µ–∫—Å–µ–π", 25)}"`, 'object', 200);
    await terminal.print('‚úÖ –£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–ª–æ–≥–∏–∫–∞ –Ω–µ –ø–æ–¥–≤–µ–ª–∞!)', 'success', 300);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ö—Ä–∏—Å—Ç–æ—Ñ–µ—Ä–∞
async function showChristopher() {
    await terminal.printSeparator('*', 'full-separator', 300);
    await terminal.showGif(
        'gifs/1757003605_new_etos-special-ezgif.com-optimize.gif',
        '–ê –≤–æ—Ç –∏ –ö—Ä–∏—Å—Ç–æ—Ñ–µ—Ä! –ö–∞–∂–µ—Ç—Å—è, –æ–Ω –æ–ø—è—Ç—å —á—Ç–æ-—Ç–æ –Ω–∞—Ç–≤–æ—Ä–∏–ª...',
        500
    );
    await terminal.print('‚ö†Ô∏è –ö—Ä–∏—Å—Ç–æ—Ñ–µ—Ä –±—ã–ª –Ω–∞–π–¥–µ–Ω –ø—Ä—è—á—É—â–∏–º—Å—è –≤ –∫–æ–¥–µ!', 'warning', 300);
    await terminal.print('üí° –ü–æ—Ö–æ–∂–µ, –æ–Ω —É–∫—Ä–∞–ª –≤—Å–µ —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π... –æ–ø—è—Ç—å', 'info', 300);
}

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Å–æ–ª–∏
function clearConsole() {
    terminal.clear();
    document.getElementById('bonus-buttons').style.display = 'none';
    isRunning = false;
    
    setTimeout(() => {
        terminal.print('üßπ –ö–æ–Ω—Å–æ–ª—å –æ—á–∏—â–µ–Ω–∞ (—á–∏—Å—Ç–æ, –∫–∞–∫ –≤ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π)', 'system', 500);
        terminal.print('üîÑ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ—Ç—Ä–æ–≥–∞—Ç—å –¥—Ä–µ–≤–Ω–∏–µ —Ä—É–Ω—ã" –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', 'info', 500);
    }, 800);
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π
async function runAllTasks() {
    if (isRunning) {
        terminal.print('‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.', 'warning', 300);
        return;
    }
    
    const runBtn = document.querySelector('.run-btn');
    runBtn.textContent = '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...';
    runBtn.classList.add('running');
    runBtn.disabled = true;
    isRunning = true;
    
    terminal.clear();
    
    try {
        await terminal.print('üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞–Ω–∏–π –ø–æ JavaScript...', 'system', 800);
        await terminal.print('‚ö° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...', 'info', 600);
        await terminal.print('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö... ‚úì', 'success', 400);
        await terminal.print('üõ†Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤... ‚úì', 'success', 400);
        await terminal.print('üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π... ‚úì', 'success', 400);
        await terminal.print('üéâ –í—Å—ë –≥–æ—Ç–æ–≤–æ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é!', 'success', 400);
        
        await basicVariablesTasks();
        await objectsTasks();
        await functionsTasks();
        
        await terminal.printSeparator('=', 'full-separator', 600);
        await terminal.print('üéä –í—Å–µ –∑–∞–¥–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! (—Ä—É–Ω—ã –ø–æ–¥—á–∏–Ω–∏–ª–∏—Å—å)', 'success', 600);
        await terminal.print('üèÅ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. (–ù–æ –∫–æ–¥ –∂–∏–≤—ë—Ç –≤–µ—á–Ω–æ...)', 'system', 600);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        setTimeout(() => {
            document.getElementById('bonus-buttons').style.display = 'flex';
        }, 1000);
        
    } catch (error) {
        await terminal.print(`üí• –û—à–∏–±–∫–∞: ${error.message} (–ö—Ä–∏—Å—Ç–æ—Ñ–µ—Ä, —ç—Ç–æ —Ç—ã?)`, 'error', 300);
    } finally {
        runBtn.textContent = '–ü–æ—Ç—Ä–æ–≥–∞—Ç—å –¥—Ä–µ–≤–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ä—É–Ω—ã';
        runBtn.classList.remove('running');
        runBtn.disabled = false;
        isRunning = false;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
        terminal.print('üíª –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ (–∏ —à—É—Ç—É–ª—É–∫–∞–º)', 'info', 500);
        terminal.print('üéÆ –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ—Ç—Ä–æ–≥–∞—Ç—å –¥—Ä–µ–≤–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ä—É–Ω—ã"', 'info', 500);
        terminal.print('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', 'warning', 500);
    }, 1000);
});